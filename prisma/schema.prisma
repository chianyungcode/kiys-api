// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  firstName       String
  lastName        String
  email           String    @unique
  emailVerifiedAt DateTime?
  password        String
  address         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  role            Role      @default(USER)

  orders              Order[]
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  Review              Review[]

  @@index([email])
  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent String
  ipAddress String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]

  @@map("sessions")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token])
  @@map("password_reset_tokens")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String
  sku         String
  description String
  price       Int
  isArchived  Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images         Image[]
  orderItems     OrderItem[]
  reviews        Review[]
  productVariant ProductVariant[]

  @@unique([slug, sku])
  @@map("products")
}

model Variant {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variantOption VariantOption[]

  @@map("variants")
}

model VariantOption {
  id        String   @id @default(uuid())
  value     String
  variantId String
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productVariant ProductVariant[]

  @@map("variant_options")
}

model ProductVariant {
  id              String        @id @default(uuid())
  productId       String
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantOptionId String
  variantOption   VariantOption @relation(fields: [variantOptionId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  stock Stock[]

  @@map("product_variants")
}

model Stock {
  id               String         @id @default(uuid())
  quantity         Int
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("stocks")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("images")
}

model Order {
  id        String   @id @default(uuid())
  isPaid    Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Review {
  id        String   @id @default(uuid())
  title     String
  comment   String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

enum Role {
  USER
  ADMIN
}
